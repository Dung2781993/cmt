@using System.Collections
@using C3.Reporting.CMT.Web.WebApp.Models
@{
    ViewBag.Title = "Archived Campaigns";
}

<h2>Archived Campaigns</h2>

<h4>My Archived Campaigns</h4>
<div>
    @(Html.Kendo().Grid<CampaignViewModel>()
          .Name("CampaignGrid")
          .Columns(columns =>
              {
                  columns.Bound(c => c.BusinessFormat).EditorTemplateName("BusinessFormatEditor").Filterable(filterable => filterable.UI("businessFilter")).Title("Format");
                  columns.Bound(c => c.CampaignCode);
                  columns.Bound(c => c.CampaignName).Width(150);
                  columns.ForeignKey(c => c.CampaignTypeId, (IEnumerable)ViewBag.CampaignTypes, "CampaignTypeId", "CampaignTypeName")
                         .Title("Campaign Type");
                  columns.Bound(c => c.Description).Width(250);
                  columns.Bound(c => c.StartDate).Format("{0:dd/MM/yyyy}");
                  columns.Bound(c => c.EndDate).Format("{0:dd/MM/yyyy}");
                  columns.ForeignKey(c => c.RedemptionCodeId, (IEnumerable)ViewBag.RedemptionCodes, "RedemptionCodeId", "Description")
                         .Title("Offer Code").Width(250);
                  columns.Bound(c => c.IsLocked).ClientTemplate("<input type='checkbox' name='IsLockedCb' #= IsLocked? 'checked' : '' # disabled/> ");
                  columns.Command(command => command.Custom("Unlock").Click("unlockCampaign")).Title("Commands");
              })
          .Pageable()
          .Sortable()
          .Scrollable(s => s.Height("auto"))
          .Filterable(filterable => filterable.Extra(false))
          .Navigatable()
          .ClientDetailTemplateId("CampaignItemTemplate")
          .HtmlAttributes(new { style = "font-size:12px" })
          .DataSource(dataSource => dataSource
                                        .Ajax()                    
                                        .PageSize(20)
                                        .Events(events => events.Error("error_handler"))                    
                                        .Model(model =>
                                            {
                                                model.Id(p => p.CampaignId);
                                                model.Field(p => p.CampaignId).Editable(false);
                                                model.Field(p => p.CampaignCode).Editable(false);
                                            })
                                        .Read(read => read.Action("MyArchivedCampaigns_Read", "Campaign"))
          )
          .AutoBind(true)   
          .Selectable(selectable => selectable.Mode(GridSelectionMode.Single)) 
          .Resizable(resize => resize.Columns(true))   
          .Events(events => events.DetailExpand("detailExpand")) 
          )

    <script id="CampaignItemTemplate" type="text/kendo-tmpl">       
        
     @(Html.Kendo().PanelBar()
           .Name("tabStrip_#=CampaignId#")
           .ExpandMode(PanelBarExpandMode.Multiple)
           .Items(panelbar =>
               {
                   panelbar.Add().Text("Campaign Segments")
                           .Content(@<text>
                                         
                                        <div>
                                            @(Html.Kendo().Grid<ChannelModel>()
                                                  .Name("ChannelGrid_#=CampaignId#")
                                                  .Columns(columns =>
                                                  {
                                                      columns.Bound(o => o.ChannelCode).Title("Segment Code");
                                                      columns.Bound(o => o.ChannelName).Title("Segment Name");
                                                      columns.ForeignKey(c => c.ChannelTypeId, new SelectList(ViewBag.ChannelTypes, "ChannelTypeId", "ChannelTypeName"))
                                                          .Title("Segment Type");
                                                      columns.Bound(o => o.Description);
                                                      columns.Bound(o => o.SegStartDate);
                                                      columns.Bound(o => o.SegEndDate);
                                                      columns.ForeignKey(c => c.RedemptionCodeId, new SelectList(ViewBag.RedemptionCodes, "RedemptionCodeId", "Description"))
                                                          .Title("Offer Code").Width(250);
                                                      columns.Bound(o => o.CreatedBy).Title("Created By");
                                                  })
                                                  .DataSource(dataSource => dataSource
                                                      .Ajax()
                                                      .PageSize(5)
                                                      .Read(read => read.Action("HierarchyBinding_Channels", "Channel", new { campaignId = "#=CampaignId#" }))
                                                      .Model(model =>
                                                      {
                                                          model.Id(p => p.ChannelId);
                                                          model.Field(p => p.ChannelId).Editable(false);
                                                          model.Field(p => p.ChannelCode).Editable(false);
                                                      })
                                                  )
                                                  .Pageable()
                                                  .Sortable()
                                                  .ToClientTemplate()
                                                  )                                           
                                        </div>
                                    
                                      </text>
                       );
                   panelbar.Add().Text("Campaign Items").Content(
                       @<text>
                            @(Html.Kendo().Grid<CampaignItemModel>()
                                  .Name("CampaignItemsGrid_#=CampaignId#")
                                  .Columns(columns =>
                                      {
                                          columns.Bound(c => c.ItemCode).Title("Item Code").Filterable(filter => filter.Extra(false));
                                          columns.Bound(c => c.Description).Title("Description").Filterable(false);
                                          columns.Bound(c => c.VendorCode).Filterable(filterable => filterable.Extra(false).UI("vendorFilter")).Title("Vendor");
                                          columns.Bound(c => c.DepartmentName).Filterable(false);
                                          columns.Bound(c => c.CategoryName).Filterable(false);
                                          columns.Bound(c => c.UnitPrice).Filterable(false).Title("AUD").Format("{0:c}");
                                          columns.Bound(c => c.NzUnitPrice).Filterable(false).Title("NZD").Format("{0:c}");
                                          columns.Bound(c => c.Lifestage).Filterable(false);
                                          columns.Bound(c => c.LimitedEdition).Title("Limited Ed").Filterable(false);
                                          columns.Bound(c => c.LaunchDate).Format("{0:dd/MM/yyyy}").Title("Launch Date").Filterable(false);
                                          columns.Bound(c => c.RangingCodeMecca).Title("Mecca").Filterable(false);
                                          columns.Bound(c => c.RangingCodeKit).Title("Kit").Filterable(false);
                                          columns.Bound(c => c.RangingCodeMaxima).Title("Maxima").Filterable(false);
                                          columns.Bound(c => c.RangingCodeImo).Title("Imo").Filterable(false);
                                          columns.Bound(c => c.CompanySoh).Title("Cmpy Soh").Filterable(false);
                                          columns.Bound(c => c.DateAdded).Format("{0:dd/MM/yyyy}").Title("Date Added").Filterable(false);
                                      })
                                  .DataSource(dataSource => dataSource
                                                                .Ajax()
                                                                .PageSize(15)
                                                                .Read(read => read.Action("CampaignItems_Read", "Campaign", new { campaignId = "#=CampaignId#" }))
                                                                .Model(model =>
                                                                    {
                                                                        model.Id(p => p.ProductId);
                                                                        model.Field(p => p.ProductId).Editable(false);
                                                                    })
                                  )
                                  //.ToolBar(toolBar => toolBar.Custom()
                                  //                           .Text("Export To CSV")
                                  //                           .HtmlAttributes(new {id = "export"})
                                  //                           .Url(Url.Action("Export", "Campaign", new {page = "~", pageSize = "~", filter = "~", sort = "~", campaignId = "#=CampaignId#"})))
                                  .Pageable(pager => pager.Refresh(true).Messages(messages => messages.Refresh("Click to refresh")))
                                  .Sortable()
                                  .Filterable()
                                  //.Events(ev => ev.DataBound("onDataBound"))
                                  //.Selectable(selectable => selectable
                                  //                              .Mode(GridSelectionMode.Multiple)
                                  //                              .Type(GridSelectionType.Row))
                                  .Resizable(resize => resize.Columns(true))
                                  .ColumnMenu()
                                  .ToClientTemplate()
                                  )
                        </text>
                       );
               })
           .ToClientTemplate()
           )       

    </script>

    <h4>Other Archived Campaigns</h4>
    @(Html.Kendo().Grid<CampaignViewModel>()
          .Name("OtherCampaignGrid")
          .Columns(columns =>
              {
                  columns.Bound(c => c.BusinessFormat).EditorTemplateName("BusinessFormatEditor").Title("Format");
                  columns.Bound(c => c.CampaignCode);
                  columns.Bound(c => c.CampaignName).Width(150);
                  columns.ForeignKey(c => c.CampaignTypeId, (IEnumerable)ViewBag.CampaignTypes, "CampaignTypeId", "CampaignTypeName")
                         .Title("Campaign Type");
                  columns.Bound(c => c.Description).Width(250);
                  columns.Bound(c => c.StartDate).Format("{0:dd/MM/yyyy}");
                  columns.Bound(c => c.EndDate).Format("{0:dd/MM/yyyy}");
                  columns.ForeignKey(c => c.RedemptionCodeId, (IEnumerable)ViewBag.RedemptionCodes, "RedemptionCodeId", "Description")
                         .Title("Offer Code").Width(250);
                  columns.Bound(c => c.CreatedBy).Title("Created By");
                  columns.Bound(c => c.IsLocked).ClientTemplate("<input type='checkbox' name='IsLockedCb' #= IsLocked? 'checked' : '' # disabled/> ");
              })
          .Pageable()
          .Sortable()
          .Scrollable(s => s.Height("auto"))
          .Navigatable()
          .ClientDetailTemplateId("OtherCampaignItemTemplate")
          .HtmlAttributes(new { style = "font-size:12px" })
          .DataSource(dataSource => dataSource
                                        .Ajax()                    
                                        .PageSize(20)
                                        .Events(events => events.Error("error_handler"))                    
                                        .Model(model =>
                                            {
                                                model.Id(p => p.CampaignId);
                                                model.Field(p => p.CampaignId).Editable(false);
                                                model.Field(p => p.CampaignCode).Editable(false);
                                            })
                                        .Read(read => read.Action("OtherArchivedCampaigns_Read", "Campaign"))
                                     
          )
          .AutoBind(true)   
          .Selectable(selectable => selectable.Mode(GridSelectionMode.Single)) 
          .Resizable(resize => resize.Columns(true))   
          .Events(events => events.DetailExpand("detailExpand")) 
          )

    <script id="OtherCampaignItemTemplate" type="text/kendo-tmpl">       
        
     @(Html.Kendo().PanelBar()
           .Name("otherTabStrip_#=CampaignId#")
           .ExpandMode(PanelBarExpandMode.Multiple)
           .Items(panelbar =>
               {
                   panelbar.Add().Text("Campaign Segments")
                           .Content(@<text>
                                         
                                        <div>
                                            @(Html.Kendo().Grid<ChannelModel>()
                                                  .Name("OtherChannelGrid_#=CampaignId#")
                                                  .Columns(columns =>
                                                  {
                                                      columns.Bound(o => o.ChannelCode).Title("Segment Code");
                                                      columns.Bound(o => o.ChannelName).Title("Segment Name");
                                                      columns.ForeignKey(c => c.ChannelTypeId, new SelectList(ViewBag.ChannelTypes, "ChannelTypeId", "ChannelTypeName"))
                                                          .Title("Segment Type");
                                                      columns.Bound(o => o.Description);
                                                      columns.Bound(o => o.SegStartDate);
                                                      columns.Bound(o => o.SegEndDate);
                                                      columns.ForeignKey(c => c.RedemptionCodeId, new SelectList(ViewBag.RedemptionCodes, "RedemptionCodeId", "Description"))
                                                          .Title("Offer Code").Width(250);
                                                      columns.Bound(o => o.CreatedBy).Title("Created By");
                                                  })
                                                  .DataSource(dataSource => dataSource
                                                      .Ajax()
                                                      .PageSize(5)
                                                      .Read(read => read.Action("HierarchyBinding_Channels", "Channel", new { campaignId = "#=CampaignId#" }))
                                                      .Model(model =>
                                                      {
                                                          model.Id(p => p.ChannelId);
                                                          model.Field(p => p.ChannelId).Editable(false);
                                                          model.Field(p => p.ChannelCode).Editable(false);
                                                      })
                                                  )
                                                  .Pageable()
                                                  .Sortable()
                                                  .ToClientTemplate()
                                                  )                                           
                                        </div>
                                    
                                      </text>
                       );
                   panelbar.Add().Text("Campaign Items").Content(
                       @<text>
                            @(Html.Kendo().Grid<CampaignItemModel>()
                                  .Name("OtherCampaignItemsGrid_#=CampaignId#")
                                  .Columns(columns =>
                                      {
                                          columns.Bound(c => c.ItemCode).Title("Item Code").Filterable(filter => filter.Extra(false));
                                          columns.Bound(c => c.Description).Title("Description").Filterable(false);
                                          columns.Bound(c => c.VendorCode).Filterable(filterable => filterable.Extra(false).UI("vendorFilter")).Title("Vendor");
                                          columns.Bound(c => c.DepartmentName).Filterable(false);
                                          columns.Bound(c => c.CategoryName).Filterable(false);
                                          columns.Bound(c => c.UnitPrice).Filterable(false).Title("AUD").Format("{0:c}");
                                          columns.Bound(c => c.NzUnitPrice).Filterable(false).Title("NZD").Format("{0:c}");
                                          columns.Bound(c => c.Lifestage).Filterable(false);
                                          columns.Bound(c => c.LimitedEdition).Title("Limited Ed").Filterable(false);
                                          columns.Bound(c => c.LaunchDate).Format("{0:dd/MM/yyyy}").Title("Launch Date").Filterable(false);
                                          columns.Bound(c => c.RangingCodeMecca).Title("Mecca").Filterable(false);
                                          columns.Bound(c => c.RangingCodeKit).Title("Kit").Filterable(false);
                                          columns.Bound(c => c.RangingCodeMaxima).Title("Maxima").Filterable(false);
                                          columns.Bound(c => c.RangingCodeImo).Title("Imo").Filterable(false);
                                          columns.Bound(c => c.CompanySoh).Title("Cmpy Soh").Filterable(false);
                                          columns.Bound(c => c.DateAdded).Format("{0:dd/MM/yyyy}").Title("Date Added").Filterable(false);
                                      })
                                  .DataSource(dataSource => dataSource
                                                                .Ajax()
                                                                .PageSize(15)
                                                                .Read(read => read.Action("CampaignItems_Read", "Campaign", new { campaignId = "#=CampaignId#" }))
                                                                .Model(model =>
                                                                    {
                                                                        model.Id(p => p.ProductId);
                                                                        model.Field(p => p.ProductId).Editable(false);
                                                                    })
                                  )
                                  //.ToolBar(toolBar => toolBar.Custom()
                                  //                           .Text("Export To CSV")
                                  //                           .HtmlAttributes(new {id = "export"})
                                  //                           .Url(Url.Action("Export", "Campaign", new {page = "~", pageSize = "~", filter = "~", sort = "~", campaignId = "#=CampaignId#"})))
                                  .Pageable(pager => pager.Refresh(true).Messages(messages => messages.Refresh("Click to refresh")))
                                  .Sortable()
                                  .Filterable()
                                  //.Events(ev => ev.DataBound("onDataBound"))
                                  //.Selectable(selectable => selectable
                                  //                              .Mode(GridSelectionMode.Multiple)
                                  //                              .Type(GridSelectionType.Row))
                                  .Resizable(resize => resize.Columns(true))
                                  .ColumnMenu()
                                  .ToClientTemplate()
                                  )
                        </text>
                       );
               })
           .ToClientTemplate()
           )       

    </script>

    <script type="text/javascript">
        var expandedRow;
        
        function error_handler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
            }
        }
    
        function businessFilter(element) {
            element.kendoDropDownList({
                dataSource: {
                    transport: {
                        read: "@Url.Action("FilterMenuCustomization_Business")"
                        }
                    },
                    optionLabel: "--Select Business--"
                });
        }
        
        function vendorFilter(element) {
            element.kendoDropDownList({
                dataSource: {
                    transport: {
                        read: "@Url.Action("FilterMenuCustomization_Vendor")"
                    }
                },
                optionLabel: "--Select Vendor--"
            });
        }

        function departmentFilter(element) {
            element.kendoAutoComplete({
                dataSource: {
                    transport: {
                        read: "@Url.Action("FilterMenuCustomization_Department")"
                    }
                }
            });
        }
    
        function categoryFilter(element) {
            element.kendoAutoComplete({
                dataSource: {
                    transport: {
                        read: "@Url.Action("FilterMenuCustomization_Category")"
                    }
                }
            });
        }
    
        function lifestageFilter(element) {
            element.kendoDropDownList({
                dataSource: {
                    transport: {
                        read: "@Url.Action("FilterMenuCustomization_Lifestage")"
                    }
                },
                optionLabel: "--Select Lifestage--"
            });
        }
        
        function unlockCampaign(e) {
            e.preventDefault();

            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            // unlock
            var postData = { campaignId: dataItem.CampaignId };

            // Removes the selected campaign from the grid
            var row = this.select();
            var id = row.data("uid");
            var dataRow = $('#CampaignGrid').data("kendoGrid").dataSource.getByUid(id);
            $('#CampaignGrid').data("kendoGrid").dataSource.remove(dataRow);

            $.ajax({
                url: '@Url.Action("UnlockCampaign")',
                type: 'GET',
                data: postData,
                cache: false,
                success: function (result) {
                    // process the results from the controller action
                    //result = jQuery.parseJSON(result);
                    //alert("Item(s) added.");
                }
            });
        }
    
        @*function addItems(campaignId) {
            var selectedGrid = "ProductItemsGrid_" + campaignId;
            var checked;
            
            var grid = $('#'+selectedGrid).data('kendoGrid');
            if ($("#segmentCheck").is(':checked')) {
                checked = true;
            } else {
                checked = false;
            }
            var rows = grid.select();
            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);

                var postData = { campaignId: campaignId, productId: selectedItem.ProductId, segmentAdd: checked };
            
                $.ajax({
                    url: '@Url.Action("AddCampaignItem")',
                    type: 'GET',
                    data: postData,
                    cache: false,
                    success: function (result) {
                        // process the results from the controller action
                        //result = jQuery.parseJSON(result);
                        //alert("Item(s) added.");
                    }
                });

                kendoConsole.log("Added: " + selectedItem.ItemCode);
                var campaignGrid = "CampaignItemsGrid_" + campaignId;
                $('#' + campaignGrid).data("kendoGrid").dataSource.fetch();
            });
        }
        
        function addAllFilteredItems(campaignId) {

            // Gets the data source from the grid.
            var productGrid = "ProductItemsGrid_" + campaignId;
            var grid = $('#' + productGrid).data('kendoGrid').dataSource;
            
            var checked;
            if ($("#segmentCheck").is(':checked')) {
                checked = true;
            } else {
                checked = false;
            }
            
            // Gets the full set of data from the data source
            var allData = grid.data();
            
            // Gets the filter from the dataSource
            var filters = grid.filter();
            
            // Applies the filter to the data
            var query = new kendo.data.Query(allData);
            var filteredData = query.filter(filters).data;
            
            //kendoConsole.log('======================');
    
            $.each(filteredData, function (index, item) {
                
                var postData = { campaignId: campaignId, productId: item.ProductId, segmentAdd: checked };
                
                $.ajax({
                    url: '@Url.Action("AddCampaignItem","Campaign")',
                    type: 'GET',
                    data: postData,
                    cache: false,
                    success: function (result) {
                        // process the results from the controller action
                        //result = jQuery.parseJSON(result);
                        //alert("Item(s) added.");
                    }
                });

                kendoConsole.log("Added: " + item.ItemCode);
            });

            var campaignGrid = "CampaignItemsGrid_" + campaignId;
            $('#' + campaignGrid).data("kendoGrid").dataSource.fetch();
        }
    
        function removeItems(campaignId) {
            var campaignGrid = "CampaignItemsGrid_" + campaignId;
        
            var grid = $('#'+campaignGrid).data('kendoGrid');
            var rows = grid.select();
            var itemCounter = 0;
            
            var r = confirm("Are you sure you want to remove these items from this campaign? Note: If these items are in segments of this campaign, they will also be removed.");
            if (r == true) {
                rows.each(function (index, row) {
                    var selectedItem = grid.dataItem(row);
                    var postData = { campaignId: campaignId, productId: selectedItem.ProductId };
                    itemCounter++;

                    $.ajax({
                        url: '@Url.Action("DeleteCampaignItem")',
                        type: 'GET',
                        data: postData,
                        cache: false,
                        async:   false,
                        success: function (result) {
                            // process the results from the controller action
                            //result = jQuery.parseJSON(result);
                            //alert("Item(s) removed.");
                        }
                    });
                });
                
                $('#' + campaignGrid).data("kendoGrid").dataSource.read();
            }

            // Send email only when all item deletion are done
            if (rows.length == itemCounter) {
                sendEmail();
            }
        }
        
        function removeAllItems(campaignId) {
            
            // Gets the data source from the grid.
            var campaignGrid = "CampaignItemsGrid_" + campaignId;
            var grid = $('#' + campaignGrid).data('kendoGrid').dataSource;

            // Gets the full set of data from the data source
            var allData = grid.data();

            // Gets the filter from the dataSource
            var filters = grid.filter();

            // Applies the filter to the data
            var query = new kendo.data.Query(allData);
            var filteredData = query.filter(filters).data;

            // Output the results
            //kendoConsole.log("Filtered count: " + filteredData.length);
            //kendoConsole.log("Total count: " + allData.length);

            var itemCounter = allData.length;

            var r = confirm("Are you sure you want to remove these items from this campaign? Note: If these items are in segments of this campaign, they will also be removed.");
            if (r == true) {
                
                $.each(filteredData, function (index, item) {
                    var postData = { campaignId: campaignId, productId: item.ProductId };

                    $.ajax({
                        url: '@Url.Action("DeleteCampaignItem")',
                        type: 'GET',
                        data: postData,
                        cache: false,
                        async: false,
                        success: function (result) {
                            // process the results from the controller action
                            //result = jQuery.parseJSON(result);
                            //alert("Item(s) added.");
                        }
                    });

                });

                $('#' + campaignGrid).data("kendoGrid").dataSource.read();
            }

            // Send email only when all item deletion are done
            if (itemCounter > 0) {
                sendEmail();
            }
        }
        
        function sendEmail() {
            // Send email notification after all campaign item removals are done
            $.ajax({
                url: '@Url.Action("ProcessEmail")',
                type: 'GET',
                cache: false,
                success: function (result) {
                    // process the results from the controller action
                    //result = jQuery.parseJSON(result);
                    //alert(result);
                }
            });

            alert("Email Notifications Sent.");
        }*@
        
        function clearFilter() {
            $("form.k-filter-menu button[type='reset']").trigger("click");
        }
    
        function detailExpand(e) {
            var grid = $('#CampaignGrid').data('kendoGrid');
            // Only one open at a time
            if (expandedRow != null && expandedRow[0] != e.masterRow[0]) {
                grid.collapseRow(expandedRow);
            }
            expandedRow = e.masterRow;
            grid.select(expandedRow);
        }
        
        //function onDataBound(e) {
        //    var campaignGrid = $('#CampaignGrid').data('kendoGrid');
        //    var row = campaignGrid.select();

        //    if (row != null) {
        //        var selectedCampaignId = campaignGrid.dataItem(row);

        //        if (selectedCampaignId != null) {
        //            var campaignId = selectedCampaignId.CampaignId;
        //            var campaignItemGrid = "CampaignItemsGrid_" + campaignId;
                    
        //            var grid = $('#' + campaignItemGrid).data('kendoGrid');
                    
        //            // ask the parameterMap to create the request object for you
        //            var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
        //                .options.parameterMap({
        //                    page: grid.dataSource.page(),
        //                    sort: grid.dataSource.sort(),
        //                    filter: grid.dataSource.filter()
        //                });

        //            // Get the export link as jQuery object
        //            var $exportLink = $('#export');

        //            // Get its 'href' attribute - the URL where it would navigate to
        //            var href = $exportLink.attr('href');

        //            // Update the 'page' parameter with the grid's current page
        //            href = href.replace(/page=([^&]*)/, 'page=' + requestObject.page || '~');

        //            // Update the 'sort' parameter with the grid's current sort descriptor
        //            href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');

        //            // Update the 'pageSize' parameter with the grid's current pageSize
        //            href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + grid.dataSource._pageSize);

        //            //update filter descriptor with the filters applied

        //            href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));

        //            // Update the 'href' attribute
        //            $exportLink.attr('href', href);
        //        }
        //    }
        //}
        
    </script>    
    
    @*<style scoped>
        .demo-section {
            width: 500px;
            text-align: center;
        }
        .demo-section .k-dropdown {
            text-align: left;
        }
        .console {
            margin: 0;
        }
    </style>*@
</div>